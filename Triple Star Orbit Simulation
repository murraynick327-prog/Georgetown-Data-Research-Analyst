from numpy import *
import math
import matplotlib.pyplot as plt

G = 4 * math.pi * math.pi #AU/year or 4 pi pi or 39.48
m_1 = 1.0
m_2 = 1.7
m_3 = 1.3
dt = 10**-3
t = 0

position1 = array([1.0, 0.0, 1.0])
position2 = array([1.0, 0.0, -1.0])
position3 = array([2.0, 0.0, 0.0])
velocity1 = array([0.0, 0.5 * math.pi, 1.4 * math.pi])
velocity2 = array([0.0, 2 * math.pi, 2 * math.pi])
velocity3 = array([0.0, 1.3 * math.pi, 1.8 * math.pi])

v_com = ((m_1 * velocity1) + (m_2 * velocity2) + (m_3 * velocity3))/ (m_1 + m_2 + m_3)
velocity1 = velocity1 - v_com
velocity2 = velocity2 - v_com
velocity3 = velocity3 - v_com

energy_values = []
time_values = []

while t < 2: # Run for a fixed time instead of indefinitely

        position1 = position1 + velocity1 * dt/2
        position2 = position2 + velocity2 * dt/2
        position3 = position3 + velocity3 * dt/2

        r_12vec = -(position1 - position2)
        r_12 = linalg.norm(r_12vec)
        r_13vec = -(position1 - position3)
        r_13 = linalg.norm(r_13vec)
        r_23vec = -(position2 - position3)
        r_23 = linalg.norm(r_23vec)

        force_star_1on2 = (-G * m_1 * m_2 * r_12vec)/(r_12**(3))
        force_star_2on1 = -force_star_1on2
        force_star_1on3 = (-G * m_1 * m_3 * r_13vec)/(r_13**(3))
        force_star_3on1 = -force_star_1on3
        force_star_2on3 = (-G * m_2 * m_3 * r_23vec)/(r_23**(3))
        force_star_3on2 = -force_star_2on3

        a_1 = (force_star_2on1 + force_star_3on1) / m_1
        a_2 = (force_star_1on2 + force_star_3on2) / m_2
        a_3 = (force_star_1on3 + force_star_2on3) / m_3

        velocity1 = velocity1 + a_1 * dt
        velocity2 = velocity2 + a_2 * dt
        velocity3 = velocity3 + a_3 * dt

        position1 = position1 + velocity1 * dt/2
        position2 = position2 + velocity2 * dt/2
        position3 = position3 + velocity3 * dt/2

        r_12vec = -(position1 - position2)
        r_12 = linalg.norm(r_12vec)
        r_13vec = -(position1 - position3)
        r_13 = linalg.norm(r_13vec)
        r_23vec = -(position2 - position3)
        r_23 = linalg.norm(r_23vec)
        t += dt

        KE = 1/2 * (m_1 * (linalg.norm(velocity1))**2) + 1/2 * (m_2 * (linalg.norm(velocity2))**2) + 1/2 * (m_3 * (linalg.norm(velocity3))**2)
        U = ((-G * m_1 * m_2) / r_12) - ((G * m_1 * m_3) / r_13) - ((G * m_2 * m_3) / r_23)
        E = KE - U

        energy_values.append(E)
        time_values.append(t)

plt.plot(time_values, energy_values)
plt.xlabel("Time")
plt.ylabel("Energy")
plt.title("Energy over Time")
plt.show()
